#!/usr/bin/env python3

import unittest

from tests.api import query

CUBE = "junaeb_vulnerability"
MEASURES_SUM = ['Count']


class SumMeasuresTestCase(unittest.TestCase):
    def test_administration_administration(self):
        level_fullname = "[Administration].[Administration]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)

    def test_date_year(self):
        level_fullname = "[Date].[Year]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)

    def test_geography_comuna(self):
        level_fullname = "[Geography].[Comuna]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)

    def test_geography_region(self):
        level_fullname = "[Geography].[Region]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)

    def test_institution_administration(self):
        level_fullname = "[Institution].[Administration]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23684375.0)

    def test_institution_institution(self):
        level_fullname = "[Institution].[Institution]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23684375.0)

    def test_priority_priority(self):
        level_fullname = "[Priority].[Priority]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)

    def test_zone_zone(self):
        level_fullname = "[Zone].[Zone]"
        result = query(CUBE, MEASURES_SUM, level_fullname)

        # Check sum for measure "Count"
        measure_sum = sum(item["Count"] for item in result)
        self.assertEqual(measure_sum, 23685108.0)
