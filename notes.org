#+TITLE: Datachile notes

* Text Generation

** Examples from OEC

In 2014 Argentina exported $69B, making it the 47th largest exporter
in the world. During the last five years the exports of Argentina have
increased at an annualized rate of 4.2%, from $56.1B in 2009 to $69B
in 2014. The most recent exports are led by Soybean Meal which
represent 17.2% of the total exports of Argentina, followed by
Delivery Trucks, which account for 5.62%.

Templatized:

In =<LatestYear>= =<Country>= exported =<SUM(Exports) GROUP BY Year
HAVING Year = LatestYear>=, making it the =<Rank(Country,
Country.Siblings, Exports>= largest exporter
in the world. During the last five years the exports of =<Country>= have
increased at an annualized rate of =<Annualize(firstYear, lastYear)>=,
from $56.1B in 2009 to $69B in 2014. The most recent exports are led
by Soybean Meal which represent 17.2% of the total exports of
Argentina, followed by Delivery Trucks, which account for 5.62%.


* Mondrian Musings

** Non-additive measures in Mondrian

This will be useful when we need to query measures that don't rollup a
hierarchy (e.g.: CASEN variables, etc)

#+BEGIN_QUOTE
Here's an MDX query on the FoodMart schema that contains a
non-additive and semi-additive measure.

#+BEGIN_SRC mdx
with member [Measures].[Non Additive Unit Sales] as
  case when [Time].Level is [Time].[Month]
     and [Gender].Level is [Gender].[Gender]
     and [Customers].Level is [Customers].[Name]
     and [Product].Level is [Product].[Product Name]
  then [Measures].[Unit Sales]
  else null
  end
member [Measures].[Semi Additive Unit Sales] as
  case when [Time].Level is [Time].[Month]
  then [Measures].[Unit Sales].Value
  else ClosingPeriod([Time].[Month]).Value
  end
select
   {[Measures].[Unit Sales],
     [Measures].[Non Additive Unit Sales],
     [Measures].[Semi Additive Unit Sales]}
   * [Gender].Members ON COLUMNS,
  [Time].Members ON ROWS
from [Sales]
#+END_SRC

The non-additive measure only has a value when you are at the lowest
level of every single dimension (I omitted a few dimensions to keep
the example short, but you get the idea). In my experience MDX queries
always have some degree of aggregation, and this measure would not
contain values in those queries.  The semi-additive measure adds on
all dimensions except Time, and for values of Quarter and Year, it
takes the value of the last Month in that period.  You can take the
same approach to build measures with more complex rollup behaviors.

(from http://forums.pentaho.com/showthread.php?65993-Support-for-non-additive-and-semi-additive-measures&p=202196#post202196)
#+END_QUOTE

** Ranking in MDX

Example of the ~Rank()~ function. ~OrderedRegion~ is a set of Regions
ordered by their associated ~CIF US~ measure. ~Region Rank~ is the
position of a Region in the ~OrderedRegion~ set.

(I don't think this works)

#+BEGIN_SRC mdx

WITH

MEMBER [Measures].[Comuna Rank] AS
   Rank([Import Geography].Level.CurrentMember,
        Order([Import Geography].Level.Members, [Measures].[CIF US], BDESC))

MEMBER [Measures].[Rank in Region] AS
   Rank([Import Geography].Level.CurrentMember,
        Order([Import Geography].Level.CurrentMember.Parent.Children,
              [Measures].[CIF US],
              BDESC))

select NON EMPTY {[Measures].[CIF US], [Measures].[Comuna Rank], [Measures].[Rank in Region]} ON 0,
  NON EMPTY filter([Date].Year.Members, [Date].CurrentMember.Value > 2000) ON 1,
  NON EMPTY [Import Geography].[Comuna].Members ON 2,
  NON EMPTY [HS].[HS0].Members ON 3
from [imports]

#+END_SRC

Here's another, which seems to work and perform well.


#+BEGIN_SRC mdx
WITH

MEMBER [Measures].[Comuna Rank] AS
   Rank([Import Geography].CurrentMember,
        Order([Import Geography].CurrentMember.Siblings, Measures.[CIF US], BDESC))

select NON EMPTY {[Measures].[CIF US], [Measures].[Comuna Rank] } ON 0,
  NON EMPTY filter([Date].Year.Members, Date.Year.CurrentMember.Name >= "2000" and Date.Year.CurrentMember.Name <= "2010") ON 1,
  Order([Import Geography].Region.Members, Measures.[CIF US], BDESC) ON 2

from [imports]

#+END_SRC

(adapted from: https://msdn.microsoft.com/en-us/library/ms144726.aspx)
** Implementing (hacking) custom aggregations

Taken from here: http://jira.pentaho.com/browse/MONDRIAN-570?focusedCommentId=253824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-253824

#+BEGIN_QUOTE

I found a (dirty) workaround for registering an additional aggregator that performs arbitrary SQL aggregrations at DB (in my case I used the Percentile_Disc function of Oracle).

First The aggregator must be registered at Mondrian which I have done in static inializer block in my =DynamicSchemaProcessor=:

#+BEGIN_SRC java
  static
  {
    int index = RolapAggregator.enumeration.getMax();
    registerAggregator(new NoneRolapAggregator(++index));
  }

  private static void registerAggregator(final RolapAggregator aggregator)
  {
    // reset field 'ordinalToValueMap' in order to make enumeration mutable again
    try
    {
      final Field f = ReflectionUtil.getField(EnumeratedValues.class, "ordinalToValueMap");
      f.setAccessible(true); // allow setting private fields
      f.set(RolapAggregator.enumeration, null);
    }
    catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException e)
    {
      throw new RuntimeException(e);
    }

    RolapAggregator.enumeration.register(aggregator);
    RolapAggregator.enumeration.makeImmutable();
  }
#+END_SRC

Note: Setting private fields of mondrian classes is not the way things should be done - but currently there is no other solution to add custom aggregators (except for the solution described in http://blog.endpoint.com/2009/07/subverting-postgresql-aggregates-for.html).

Here is the implementation of the NoneRolapAggregator:

#+BEGIN_SRC java

/**
 * {@link Aggregator} implementation for performing all aggregation at DB.
 * NOTE: This aggregator does not use segments that are already loaded (into cache).
 * It always queries back to DB for doing the required aggregation.
 */
public class NoneRolapAggregator extends RolapAggregator {

  public NoneRolapAggregator(final int index) {
    super("None", index, false);
  }

  public Aggregator getRollup()  {
    return this;
  }

  public Object aggregate(final Evaluator evaluator, final TupleList members, final Calc exp) {
    // See AggregateFunDef$AggregateCalc.aggregate where logic for distinct-count
    // is implemented (which also queries back to DB for aggregated value, independently from segments).
    // See also http://lists.pentaho.org/pipermail/mondrian/2007-November/000901.html
    final Evaluator evaluator2 = evaluator.pushAggregation(members);
    evaluator2.setNonEmpty(false);
    return evaluator2.evaluateCurrent();
  }

  public String getExpression(final String operand) {
    return operand;
  }

  public boolean supportsFastAggregates(final Datatype dataType)  {
    return false;
  }
}

#+END_SRC

With this NoneRolapAggregator I can use MeasureExpressions to use arbitrary SQL aggregations. E.g.,

#+BEGIN_SRC xml
<Measure name="Percentile75" caption="Percentile 75%" dataType="Numeric" aggregator="None" visible="true" >
  <MeasureExpression>
    <SQL dialect="Oracle">PERCENTILE_DISC(0.75) WITHIN GROUP (ORDER BY MyRawValue ASC)</SQL>
  </MeasureExpression>
</Measure>
#+END_SRC

#+END_QUOTE
